use :node;

var Node = module.require('../Node').Node,
    Parameter = module.require('../Parameter').Parameter,
    CallExpression = module.require('../expressions/CallExpression').CallExpression;

fn FunctionDeclarationStatement(id, params, body, inheritsFrom)
  extends Node {

  this.type = 'FunctionDeclaration';
  this.defaults = [];
  this.rest = null;
  this.generator = false;
  this.expression = false;

  this.id = id;
  this.id.parent = this;

  this.body = body;
  this.body.parent = this;

  this.params = params;

  for param in params {
    param.parent = this;
  }

  this.inheritsFrom = inheritsFrom;

  if this.inheritsFrom? {
    this.inheritsFrom.parent = this;
  }
}

FunctionDeclarationStatement.prototype.codegen = () -> {
  if !super.codegen() {
    return;
  }

  this.id = this.id.codegen();
  Parameter.generateFunctionBody(this, this.params, this.body, this.defaults);

  this.body = this.body.codegen();

  if this.inheritsFrom? {
    Parameter.geneateFunctionExtend(this);
  }

  return this;
};

FunctionDeclarationStatement.prototype.hasCallExpression = () -> true;

exports.FunctionDeclarationStatement = FunctionDeclarationStatement;