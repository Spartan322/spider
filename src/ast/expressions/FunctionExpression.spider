use :node;

var Node = module.require('../Node').Node,
    Parameter = module.require('../Parameter').Parameter,
    CallExpression = module.require('../expressions/CallExpression').CallExpression;

fn FunctionExpression (id, params, body, inheritsFrom, operator)
  extends Node {

  if operator == "=>" {
    this.type = "ArrowFunctionExpression";
  } else {
    this.type = 'FunctionExpression';
  }

  this.defaults = [];
  this.rest = null;
  this.generator = false;
  this.expression = false;
  this.operator = operator;

  this.id = id;

  if this.id? {
    this.id.parent = this;
  }

  this.body = body;
  this.params = params;

  body.parent = this;

  for param in params {
    param.parent = this;
  }

  this.inheritsFrom = inheritsFrom;

  if this.inheritsFrom? {
    this.inheritsFrom.parent = this;
  }

  if this.body.type != 'BlockStatement' {
    this.autoBlock = true;
    this.body = {
      "type": "BlockStatement",
      "body": [
        {
          "type": "ReturnStatement",
          "argument": this.body
        }
      ]
    };

    var self = this;
    this.getContext = () -> {
      return {
        node: self.body,
        position: -1
      };
    };
  }
}

FunctionExpression.prototype.codegen = () -> {
  if !super.codegen() {
    return;
  }

  if this.id? {
    this.id = this.id.codegen(false);
  }

  Parameter.generateFunctionBody(this, this.params, this.body, this.defaults);

  if this.autoBlock {
    this.body.body[0].argument = this.body.body[this.body.body.length - 1].argument.codegen();
  } else {
    this.body = this.body.codegen();
  }

  if this.inheritsFrom? {
    return Parameter.generateFunctionExtend(this, this.getNextVariableName("functionExpression"));
  }

  return this;
};

FunctionExpression.prototype.hasCallExpression = () -> true;

exports.FunctionExpression = FunctionExpression;