use :node;

var Node = module.require('../Node').Node,
    Identifier = module.require('../literals/Identifier').Identifier,
    NullCoalescingExpression = module.require('./NullCoalescingExpression').NullCoalescingExpression;

fn AssignmentExpression(left, operator, right)
  extends Node {

  this.type = 'AssignmentExpression';
  this.operator = operator;

  this.left = left;
  this.left.parent = this;

  this.right = right;
  this.right.parent = this;

}

AssignmentExpression.prototype.codegen = () -> {
  if !super.codegen() {
    return;
  }

  if this.operator == '?=' {
    if this.left.type != 'Identifier' { throw "left must be Identifier"; }
    this.right = new NullCoalescingExpression(new Identifier(this.left.name), this.right);
    this.right.parent = this;
    this.operator = '=';
  }

  this.left = this.left.codegen();
  this.right = this.right.codegen(true);

  return this;
};

AssignmentExpression.prototype.hasCallExpression = () -> {
  return this.left?.hasCallExpression() ||
         this.right?.hasCallExpression();
};

exports.AssignmentExpression = AssignmentExpression;
